{"version":3,"file":"static/js/415.7fa10d19.chunk.js","mappings":"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","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","Pages/Cast.jsx","helpers/transformCastData.js","helpers/transformRewievsData.js","Services/apiFetcher.js","helpers/transformMoviesDataArray.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastListUL = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: stretch;\n  justify-content: center;\n\n  margin: -10px;\n`;\n\nexport const CastListLI = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: baseline;\n  max-width: 150px;\n  background-color: #304040;\n\n  margin: 10px;\n  flex-grow: 1;\n  transition: transform 250ms linear;\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n`;\n\nexport const CastListImg = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 100%;\n  margin-bottom: 3px;\n`;\n\nexport const CastListP = styled.p`\n  display: block;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 500;\n  margin-top: 5px;\n  color: white;\n`;\n\nexport const CastListSpan = styled.span`\n  display: block;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 500;\n  margin-top: 5px;\n  color: white;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  CastListUL,\n  CastListImg,\n  CastListLI,\n  CastListP,\n  CastListSpan,\n} from 'components/CastList/CastList.styled';\n\nexport const CastList = ({ cast }) => {\n  const genderSwitcher = data => {\n    if (data === 2) {\n      return 'Actor';\n    }\n    if (data === 1) {\n      return 'Actress';\n    }\n    if (data === 0) {\n      return 'Individual';\n    }\n  };\n  return (\n    <CastListUL>\n      {cast &&\n        cast.map(({ id, name, gender, profile }) => (\n          <CastListLI key={id}>\n            <CastListImg\n              src={\n                profile\n                  ? 'https://image.tmdb.org/t/p/w500' + profile\n                  : 'https://louisville.edu/history/images/noimage.jpg/image'\n              }\n              alt={name}\n              width=\"150\"\n              height=\"100%\"\n            ></CastListImg>\n            <CastListP>{genderSwitcher(gender)}</CastListP>\n            <CastListSpan>{name}</CastListSpan>\n          </CastListLI>\n        ))}\n    </CastListUL>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      profile: PropTypes.string,\n      gender: PropTypes.number,\n    })\n  ).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport Api from '../Services/apiFetcher';\nimport { CastList } from 'components/CastList/CastList';\nimport { Loader } from '../components/Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const isFirstRender = useRef(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const { slug } = useParams();\n\n  useEffect(() => {\n    async function getActors() {\n      setIsLoading(true);\n      try {\n        const res = await Api.fetchActors(slug);\n\n        setCast(res);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    if (isFirstRender.current) {\n      getActors();\n      isFirstRender.current = false;\n      return;\n    }\n  }, [slug]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {/* {cast && <CastList cast={cast} />} */}\n      {cast.length === 0 && !isLoading ? (\n        <p> We don't have any actors</p>\n      ) : (\n        <CastList cast={cast} />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","export const transformCastData = data => {\n  return data.map(({ cast_id, name, gender, profile_path }) => ({\n    id: cast_id,\n    name,\n    gender,\n    profile: profile_path,\n  }));\n};\n","export const transformRewievstData = data => {\n  return data.map(({ author, content, updated_at, id }) => ({\n    id,\n    author,\n    updated: updated_at,\n    content,\n  }));\n};\n","import axios from 'axios';\nimport {\n  transformCastData,\n  transformMoviesDataArray,\n  transformRewievstData,\n} from 'helpers';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'cf140a587ec927271eacbad378897741',\n  language: 'en-US',\n});\n\nasync function fetchMoviesByName(keyWord, page = 1) {\n  const search = `search/movie?${searchParams}&query=${keyWord}&page=${page}`;\n\n  const { data } = await axios.get(search);\n  console.log(data);\n\n  return data;\n}\n\nasync function fetchMostPopular() {\n  const search = `trending/movie/day?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios(search);\n\n  // const popular = transformMoviesDataArray(results);\n  return transformMoviesDataArray(results);\n}\n\nasync function fetchMovieById(movieId) {\n  const search = `/movie/${movieId}?${searchParams}`;\n\n  const { data } = await axios.get(search, {\n    params: {\n      append_to_response: 'videos',\n    },\n  });\n\n  return data;\n}\n\nasync function fetchActors(movieId) {\n  const search = `/movie/${movieId}/credits?${searchParams}`;\n\n  const {\n    data: { cast },\n  } = await axios(search);\n  const actors = transformCastData(cast);\n  return actors;\n}\n\nasync function fetchReviews(movieId) {\n  const search = `/movie/${movieId}/reviews?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios.get(search);\n  const rewievs = transformRewievstData(results);\n  return rewievs;\n}\n\nconst allAPIs = {\n  fetchMoviesByName,\n  fetchMostPopular,\n  fetchMovieById,\n  fetchActors,\n  fetchReviews,\n};\nexport default allAPIs;\n","export const transformMoviesDataArray = data => {\n  return data.map(({ release_date, title, poster_path, id }) => ({\n    id,\n    title,\n    release: new Date(release_date).getFullYear(),\n    poster: poster_path,\n  }));\n};\n"],"names":["CastListUL","styled","CastListLI","CastListImg","CastListP","CastListSpan","CastList","cast","map","data","id","name","gender","profile","src","alt","width","height","useState","setCast","isFirstRender","useRef","isLoading","setIsLoading","slug","useParams","useEffect","Api","res","console","log","current","getActors","Loader","length","transformCastData","cast_id","profile_path","transformRewievstData","author","content","updated_at","updated","axios","searchParams","URLSearchParams","api_key","language","fetchMoviesByName","keyWord","page","search","fetchMostPopular","results","transformMoviesDataArray","fetchMovieById","movieId","params","append_to_response","fetchActors","actors","fetchReviews","rewievs","allAPIs","release_date","title","poster_path","release","Date","getFullYear","poster"],"sourceRoot":""}