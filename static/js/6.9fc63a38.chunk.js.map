{"version":3,"file":"static/js/6.9fc63a38.chunk.js","mappings":"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","sources":["Pages/Home.jsx","helpers/transformCastData.js","helpers/transformRewievsData.js","Services/apiFetcher.js","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesCardList/MoviesCardList.styled.js","components/MoviesCardList/MoviesCardList.jsx","helpers/transformMoviesDataArray.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport Api from '../Services/apiFetcher';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesCardList } from '../components/MoviesCardList/MoviesCardList';\n// import { Link, useLocation } from 'react-router-dom';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const isFirstRender = useRef(true);\n  // const location = useLocation();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const array = await Api.fetchMostPopular();\n        setMovies(array);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    if (isFirstRender.current) {\n      getMovies();\n      isFirstRender.current = false;\n      return;\n    }\n  }, []);\n  return (\n    movies && (\n      <>\n        <h1>Trending today</h1>\n        {isLoading && <Loader />}\n        <MoviesCardList movies={movies} />\n      </>\n    )\n  );\n};\nexport default Home;\n","export const transformCastData = data => {\n  return data.map(({ cast_id, name, gender, profile_path }) => ({\n    id: cast_id,\n    name,\n    gender,\n    profile: profile_path,\n  }));\n};\n","export const transformRewievstData = data => {\n  return data.map(({ author, content, updated_at, id }) => ({\n    id,\n    author,\n    updated: updated_at,\n    content,\n  }));\n};\n","import axios from 'axios';\nimport {\n  transformCastData,\n  transformMoviesDataArray,\n  transformRewievstData,\n} from 'helpers';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'cf140a587ec927271eacbad378897741',\n  language: 'en-US',\n});\n\nasync function fetchMoviesByName(keyWord, page = 1) {\n  const search = `search/movie?${searchParams}&query=${keyWord}&page=${page}`;\n\n  const { data } = await axios.get(search);\n  console.log(data);\n\n  return data;\n}\n\nasync function fetchMostPopular() {\n  const search = `trending/movie/day?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios(search);\n\n  // const popular = transformMoviesDataArray(results);\n  return transformMoviesDataArray(results);\n}\n\nasync function fetchMovieById(movieId) {\n  const search = `/movie/${movieId}?${searchParams}`;\n\n  const { data } = await axios.get(search, {\n    params: {\n      append_to_response: 'videos',\n    },\n  });\n\n  return data;\n}\n\nasync function fetchActors(movieId) {\n  const search = `/movie/${movieId}/credits?${searchParams}`;\n\n  const {\n    data: { cast },\n  } = await axios(search);\n  const actors = transformCastData(cast);\n  return actors;\n}\n\nasync function fetchReviews(movieId) {\n  const search = `/movie/${movieId}/reviews?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios.get(search);\n  const rewievs = transformRewievstData(results);\n  return rewievs;\n}\n\nconst allAPIs = {\n  fetchMoviesByName,\n  fetchMostPopular,\n  fetchMovieById,\n  fetchActors,\n  fetchReviews,\n};\nexport default allAPIs;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Image = styled.img`\n  border-radius: 5px 5px 0 0;\n  width: 300px;\n`;\n\nexport const CardLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  width: 100%;\n  border-radius: 5px;\n  transition: box-shadow 250ms linear;\n  /* &:hover,\n  &:focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  } */\n`;\n\nexport const CardBottom = styled.div`\n  padding: 20px;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nexport const CardTitle = styled.h2`\n  font-size: 22px;\n  line-height: 1.33;\n  text-align: start;\n  color: #4cb5f5;\n`;\n\nexport const H4 = styled.h4`\n  text-align: start;\n  margin-bottom: 0px;\n  margin-top: 10px;\n  font-size: 16px;\n  color: #c9d1c8;\n  font-weight: 400;\n`;\n\nexport const Span = styled.span`\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0.1em;\n  color: #4cb5f5;\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  CardLink,\n  CardBottom,\n  CardTitle,\n  Image,\n  H4,\n  Span,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({ release, title, poster, id }) => {\n  const location = useLocation();\n\n  return (\n    <CardLink to={`/movies/${id}`} state={{ from: location }}>\n      <Image\n        src={\n          poster\n            ? `https://image.tmdb.org/t/p/w300${poster}`\n            : 'https://louisville.edu/history/images/noimage.jpg/image'\n        }\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      />\n      <CardBottom>\n        <CardTitle>{title}</CardTitle>\n        <H4>\n          Release date: <Span>{release}</Span>\n        </H4>\n      </CardBottom>\n    </CardLink>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n`;\n\nexport const Card = styled.li`\n  width: 200px;\n  background-color: #304040;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border-radius: 5px;\n\n  @media (min-width: 300px) {\n    width: 285px;\n  }\n`;\n","import { MovieCard } from 'components/MovieCard/MovieCard';\nimport { List, Card } from './MoviesCardList.styled';\nexport const MoviesCardList = ({ movies }) => {\n  return (\n    <List>\n      {movies &&\n        movies.map(({ release, title, poster, id }) => (\n          <Card key={id}>\n            <MovieCard\n              id={id}\n              release={release}\n              title={title}\n              poster={poster}\n            />\n          </Card>\n        ))}\n    </List>\n  );\n};\n","export const transformMoviesDataArray = data => {\n  return data.map(({ release_date, title, poster_path, id }) => ({\n    id,\n    title,\n    release: new Date(release_date).getFullYear(),\n    poster: poster_path,\n  }));\n};\n"],"names":["useState","movies","setMovies","isLoading","setIsLoading","isFirstRender","useRef","useEffect","Api","array","console","log","current","getMovies","transformCastData","data","map","id","cast_id","name","gender","profile","profile_path","transformRewievstData","author","content","updated_at","updated","axios","searchParams","URLSearchParams","api_key","language","fetchMoviesByName","keyWord","page","search","fetchMostPopular","results","transformMoviesDataArray","fetchMovieById","movieId","params","append_to_response","fetchActors","cast","actors","fetchReviews","rewievs","allAPIs","Image","styled","CardLink","Link","CardBottom","CardTitle","H4","Span","MovieCard","release","title","poster","location","useLocation","to","state","from","src","alt","width","height","List","Card","MoviesCardList","release_date","poster_path","Date","getFullYear"],"sourceRoot":""}