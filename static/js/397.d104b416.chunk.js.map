{"version":3,"file":"static/js/397.d104b416.chunk.js","mappings":"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","sources":["components/Review/Review.styled.js","components/Review/ReviewList.jsx","Pages/Reviews.jsx","helpers/transformCastData.js","helpers/transformRewievsData.js","Services/apiFetcher.js","helpers/transformMoviesDataArray.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-radius: 10px;\n  background-color: #5b7075;\n  padding: 10px;\n  border-radius: 6px;\n  box-shadow: 0 0 5px 1px grey;\n`;\n\nexport const ReviewsLi = styled.li`\n  border-radius: 6px;\n  padding: 35px;\n  margin-left: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  border-radius: 10px;\n  background-color: #c9d1c8;\n  /* background-color: white; */\n  box-shadow: 0 0 5px 1px black;\n`;\n\nexport const ReviewsH4 = styled.h4`\n  font-weight: bold;\n  color: tomato;\n`;\n\nexport const ReviewsP = styled.p`\n  display: flex;\n  flex-direction: column;\n  color: black;\n`;\n\nexport const ReviewsSpan = styled.span`\n  font-weight: bold;\n  color: black;\n`;\n\nexport const ReviewsH5 = styled.h5`\n  color: tomato;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  ReviewsUl,\n  ReviewsLi,\n  ReviewsH4,\n  ReviewsSpan,\n  ReviewsP,\n  ReviewsH5,\n} from './Review.styled';\n\nexport const ReviewList = ({ reviews }) => {\n  const timeReduser = data => {\n    const year = data.slice(0, 10);\n    const time = data.slice(11, 19);\n    return year + ' ' + time;\n  };\n  return (\n    <ReviewsUl>\n      {reviews &&\n        reviews.map(({ author, content, updated, id }) => {\n          return (\n            <ReviewsLi key={id}>\n              <ReviewsH4>\n                Author: <ReviewsSpan>{author}</ReviewsSpan>\n              </ReviewsH4>\n              <ReviewsP>{content}</ReviewsP>\n              <ReviewsH5>\n                Last update: <ReviewsSpan>{timeReduser(updated)}</ReviewsSpan>\n              </ReviewsH5>\n            </ReviewsLi>\n          );\n        })}\n    </ReviewsUl>\n  );\n};\n\nReviewList.propTypes = {\n  reviews: PropTypes.array.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport Api from '../Services/apiFetcher';\nimport { ReviewList } from 'components/Review/ReviewList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const isFirstRender = useRef(true);\n  const { slug } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      setIsLoading(true);\n      try {\n        Api.fetchReviews(slug).then(setReview);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (isFirstRender.current) {\n      getReviews();\n      isFirstRender.current = false;\n      return;\n    }\n  }, [slug]);\n\n  console.log(reviews.length);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {reviews.length === 0 && !isLoading ? (\n        <p> We don't have any reviews</p>\n      ) : (\n        <ReviewList reviews={reviews} />\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","export const transformCastData = data => {\n  return data.map(({ cast_id, name, gender, profile_path }) => ({\n    id: cast_id,\n    name,\n    gender,\n    profile: profile_path,\n  }));\n};\n","export const transformRewievstData = data => {\n  return data.map(({ author, content, updated_at, id }) => ({\n    id,\n    author,\n    updated: updated_at,\n    content,\n  }));\n};\n","import axios from 'axios';\nimport {\n  transformCastData,\n  transformMoviesDataArray,\n  transformRewievstData,\n} from 'helpers';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'cf140a587ec927271eacbad378897741',\n  language: 'en-US',\n});\n\nasync function fetchMoviesByName(keyWord, page = 1) {\n  const search = `search/movie?${searchParams}&query=${keyWord}&page=${page}`;\n\n  const { data } = await axios.get(search);\n  console.log(data);\n\n  return data;\n}\n\nasync function fetchMostPopular() {\n  const search = `trending/movie/day?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios(search);\n\n  // const popular = transformMoviesDataArray(results);\n  return transformMoviesDataArray(results);\n}\n\nasync function fetchMovieById(movieId) {\n  const search = `/movie/${movieId}?${searchParams}`;\n\n  const { data } = await axios.get(search, {\n    params: {\n      append_to_response: 'videos',\n    },\n  });\n\n  return data;\n}\n\nasync function fetchActors(movieId) {\n  const search = `/movie/${movieId}/credits?${searchParams}`;\n\n  const {\n    data: { cast },\n  } = await axios(search);\n  const actors = transformCastData(cast);\n  return actors;\n}\n\nasync function fetchReviews(movieId) {\n  const search = `/movie/${movieId}/reviews?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios.get(search);\n  const rewievs = transformRewievstData(results);\n  return rewievs;\n}\n\nconst allAPIs = {\n  fetchMoviesByName,\n  fetchMostPopular,\n  fetchMovieById,\n  fetchActors,\n  fetchReviews,\n};\nexport default allAPIs;\n","export const transformMoviesDataArray = data => {\n  return data.map(({ release_date, title, poster_path, id }) => ({\n    id,\n    title,\n    release: new Date(release_date).getFullYear(),\n    poster: poster_path,\n  }));\n};\n"],"names":["ReviewsUl","styled","ReviewsLi","ReviewsH4","ReviewsP","ReviewsSpan","ReviewsH5","ReviewList","reviews","map","data","author","content","updated","id","slice","useState","setReview","isLoading","setIsLoading","isFirstRender","useRef","slug","useParams","useEffect","getReviews","Api","then","error","console","log","current","length","Loader","transformCastData","cast_id","name","gender","profile","profile_path","transformRewievstData","updated_at","axios","searchParams","URLSearchParams","api_key","language","fetchMoviesByName","keyWord","page","search","fetchMostPopular","results","transformMoviesDataArray","fetchMovieById","movieId","params","append_to_response","fetchActors","cast","actors","fetchReviews","rewievs","allAPIs","release_date","title","poster_path","release","Date","getFullYear","poster"],"sourceRoot":""}