{"version":3,"file":"static/js/818.aa4d2c12.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","components/Form/Form.jsx","components/ButtonLoadMore/Button.styled.js","components/ButtonLoadMore/Button.jsx","Pages/Movies.jsx","helpers/transformCastData.js","helpers/transformRewievsData.js","Services/apiFetcher.js","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesCardList/MoviesCardList.styled.js","components/MoviesCardList/MoviesCardList.jsx","helpers/transformMoviesDataArray.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n  margin-bottom: 50px;\n`;\nexport const Input = styled.input`\n  @media (max-width: 479px) {\n    width: 170px;\n  }\n  width: 357px;\n  text-align: center;\n  padding-left: 35px;\n  font-size: 18px;\n  outline: none;\n  background-color: inherit;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: 2px solid #304040;\n\n  border-image-slice: 1;\n  color: #c9d1c8;\n\n  &::placeholder {\n    font-size: 12px;\n\n    @media (min-width: 768px) {\n      font-size: 18px;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  background-color: inherit;\n  transition: transform 250ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.2);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Form, Input, Button } from './Form.styled';\n\nimport { IconContext } from 'react-icons';\nimport { VscSearch } from 'react-icons/vsc';\n\nexport const SearchForm = ({ formFunc }) => {\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    const form = ev.target;\n    const check = form.elements.something.value;\n\n    if (check.trim() === '') {\n      return alert('Nothing to search');\n    }\n    formFunc({ moviename: form.elements.something.value });\n\n    form.reset();\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"something\"\n        autoComplete=\"off\"\n        placeholder=\"Put something to find ...\"\n      />\n      <Button>\n        <IconContext.Provider\n          value={{\n            size: 25,\n            color: 'tomato',\n          }}\n        >\n          <VscSearch />\n        </IconContext.Provider>\n      </Button>\n    </Form>\n  );\n};\nSearchForm.propTypes = {\n  formFunc: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const LoadMoreButton = styled.button`\n  padding: 8px 16px;\n  border-radius: 4px;\n  margin: 20px auto 10px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: block;\n  color: #fff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  :hover,\n  :focus {\n    background-color: #303f9f;\n  }\n`;\n","import { LoadMoreButton } from './Button.styled';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ onClick, loading }) => {\n  return (\n    <LoadMoreButton onClick={onClick} type=\"button\" disabled={loading}>\n      Load more\n    </LoadMoreButton>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Api from '../Services/apiFetcher';\nimport { SearchForm } from 'components/Form/Form';\nimport { Button } from 'components/ButtonLoadMore/Button';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesCardList } from '../components/MoviesCardList/MoviesCardList';\n\nimport { transformMoviesDataArray } from 'helpers';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryP = searchParams.get('moviename');\n\n  const [pageP, setPage] = useState(1);\n  const [isLoading, setIsloading] = useState(false);\n  const [showLoadMore, setShowLoadMore] = useState(false);\n  // const location = useLocation();\n\n  useEffect(() => {\n    if (!queryP) {\n      return;\n    }\n    async function getMovies() {\n      setIsloading(true);\n      try {\n        const array = await Api.fetchMoviesByName(queryP, pageP);\n\n        if (!array.total_results) {\n          alert(\n            'Sorry, there are no images matching your search query. Please try again.'\n          );\n        }\n        if (pageP === array.total_pages && pageP > 1) {\n          alert('Last Page');\n        }\n        setShowLoadMore(pageP < array.total_pages);\n\n        setMovies(prevMovies => [\n          ...prevMovies,\n          ...transformMoviesDataArray(array.results),\n        ]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsloading(false);\n      }\n    }\n    getMovies();\n  }, [pageP, queryP]);\n\n  //*\n  const nextPage = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  const formSubmit = query => {\n    if (query !== queryP) {\n      setSearchParams(query);\n      setPage(1);\n      setMovies([]);\n    }\n    if (query === queryP) {\n      return alert('they are equal');\n    }\n  };\n\n  return (\n    <>\n      <SearchForm formFunc={formSubmit} />\n      {queryP !== null && <MoviesCardList movies={movies} />}\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        showLoadMore && <Button onClick={nextPage} loading={isLoading} />\n      )}\n    </>\n  );\n};\nexport default Movies;","export const transformCastData = data => {\n  return data.map(({ cast_id, name, gender, profile_path }) => ({\n    id: cast_id,\n    name,\n    gender,\n    profile: profile_path,\n  }));\n};\n","export const transformRewievstData = data => {\n  return data.map(({ author, content, updated_at, id }) => ({\n    id,\n    author,\n    updated: updated_at,\n    content,\n  }));\n};\n","import axios from 'axios';\nimport {\n  transformCastData,\n  transformMoviesDataArray,\n  transformRewievstData,\n} from 'helpers';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'cf140a587ec927271eacbad378897741',\n  language: 'en-US',\n});\n\nasync function fetchMoviesByName(keyWord, page = 1) {\n  const search = `search/movie?${searchParams}&query=${keyWord}&page=${page}`;\n\n  const { data } = await axios.get(search);\n  console.log(data);\n\n  return data;\n}\n\nasync function fetchMostPopular() {\n  const search = `trending/movie/day?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios(search);\n\n  // const popular = transformMoviesDataArray(results);\n  return transformMoviesDataArray(results);\n}\n\nasync function fetchMovieById(movieId) {\n  const search = `/movie/${movieId}?${searchParams}`;\n\n  const { data } = await axios.get(search, {\n    params: {\n      append_to_response: 'videos',\n    },\n  });\n\n  return data;\n}\n\nasync function fetchActors(movieId) {\n  const search = `/movie/${movieId}/credits?${searchParams}`;\n\n  const {\n    data: { cast },\n  } = await axios(search);\n  const actors = transformCastData(cast);\n  return actors;\n}\n\nasync function fetchReviews(movieId) {\n  const search = `/movie/${movieId}/reviews?${searchParams}`;\n\n  const {\n    data: { results },\n  } = await axios.get(search);\n  const rewievs = transformRewievstData(results);\n  return rewievs;\n}\n\nconst allAPIs = {\n  fetchMoviesByName,\n  fetchMostPopular,\n  fetchMovieById,\n  fetchActors,\n  fetchReviews,\n};\nexport default allAPIs;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Image = styled.img`\n  border-radius: 5px 5px 0 0;\n  width: 300px;\n`;\n\nexport const CardLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  width: 100%;\n  border-radius: 5px;\n  transition: box-shadow 250ms linear;\n  /* &:hover,\n  &:focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  } */\n`;\n\nexport const CardBottom = styled.div`\n  padding: 20px;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nexport const CardTitle = styled.h2`\n  font-size: 22px;\n  line-height: 1.33;\n  text-align: start;\n  color: #4cb5f5;\n`;\n\nexport const H4 = styled.h4`\n  text-align: start;\n  margin-bottom: 0px;\n  margin-top: 10px;\n  font-size: 16px;\n  color: #c9d1c8;\n  font-weight: 400;\n`;\n\nexport const Span = styled.span`\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0.1em;\n  color: #4cb5f5;\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  CardLink,\n  CardBottom,\n  CardTitle,\n  Image,\n  H4,\n  Span,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({ release, title, poster, id }) => {\n  const location = useLocation();\n\n  return (\n    <CardLink to={`/movies/${id}`} state={{ from: location }}>\n      <Image\n        src={\n          poster\n            ? `https://image.tmdb.org/t/p/w300${poster}`\n            : 'https://louisville.edu/history/images/noimage.jpg/image'\n        }\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      />\n      <CardBottom>\n        <CardTitle>{title}</CardTitle>\n        <H4>\n          Release date: <Span>{release}</Span>\n        </H4>\n      </CardBottom>\n    </CardLink>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n`;\n\nexport const Card = styled.li`\n  width: 200px;\n  background-color: #304040;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border-radius: 5px;\n\n  @media (min-width: 300px) {\n    width: 285px;\n  }\n`;\n","import { MovieCard } from 'components/MovieCard/MovieCard';\nimport { List, Card } from './MoviesCardList.styled';\nexport const MoviesCardList = ({ movies }) => {\n  return (\n    <List>\n      {movies &&\n        movies.map(({ release, title, poster, id }) => (\n          <Card key={id}>\n            <MovieCard\n              id={id}\n              release={release}\n              title={title}\n              poster={poster}\n            />\n          </Card>\n        ))}\n    </List>\n  );\n};\n","export const transformMoviesDataArray = data => {\n  return data.map(({ release_date, title, poster_path, id }) => ({\n    id,\n    title,\n    release: new Date(release_date).getFullYear(),\n    poster: poster_path,\n  }));\n};\n"],"names":["Form","styled","Input","Button","SearchForm","formFunc","onSubmit","ev","preventDefault","form","target","elements","something","value","trim","alert","moviename","reset","type","name","autoComplete","placeholder","size","color","LoadMoreButton","onClick","loading","disabled","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","queryP","get","pageP","setPage","isLoading","setIsloading","showLoadMore","setShowLoadMore","useEffect","Api","array","total_results","total_pages","prevMovies","transformMoviesDataArray","results","console","log","getMovies","query","MoviesCardList","Loader","prevPage","transformCastData","data","map","id","cast_id","gender","profile","profile_path","transformRewievstData","author","content","updated_at","updated","axios","URLSearchParams","api_key","language","fetchMoviesByName","keyWord","page","search","fetchMostPopular","fetchMovieById","movieId","params","append_to_response","fetchActors","cast","actors","fetchReviews","rewievs","allAPIs","Image","CardLink","Link","CardBottom","CardTitle","H4","Span","MovieCard","release","title","poster","location","useLocation","to","state","from","src","alt","width","height","List","Card","release_date","poster_path","Date","getFullYear"],"sourceRoot":""}